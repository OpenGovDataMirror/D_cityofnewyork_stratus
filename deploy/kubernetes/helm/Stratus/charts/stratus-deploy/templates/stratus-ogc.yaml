apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: stratus-ogc-deployment
spec:
  template:
    metadata:
      namespace: default
      labels:
        tier: stratus-ogc-backend
    spec:
      restartPolicy: Always
      imagePullSecrets:
        - name: {{ .Values.stratus.secretKey | default "mydockerkey" }}
      containers:
        - name: stratus
          env:
            - name: STRATUS_ADMIN_ENABLED
              value: "false"
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.redis.implementation }}-{{ .Values.redis.type }}
{{- if .Values.stratus.persistentVolume.host }}
            - name: GEOWEBCACHE_CACHE_DIR
              value: {{ .Values.stratus.persistentVolume.localPath | default "/data" }}/gwc
{{- end }}
{{- if .Values.stratus.ogc.rootPath }}
            - name: SERVER_CONTEXTPATH
              value: "{{ .Values.stratus.ogc.rootPath }}"
{{- end }}
            - name: GWC_ENABLED
              value: "true"
            - name: STRATUS_CATALOG_REDIS_CACHING_USE_CACHING_CALLBACK 
              value: "{{ .Values.redis.cache.enabled }}"
            - name: STRATUS_CATALOG_REDIS_CACHING_USE_PARALLEL_QUERIES 
              value: "{{ .Values.redis.cache.parallel }}"
{{- if .Values.redis.host }}
            - name: STRATUS_CATALOG_REDIS_MANUAL_HOST
              value: {{ .Values.redis.host.ro }}
            - name: STRATUS_CATALOG_REDIS_MANUAL_PORT
              value: "{{ default 6379 .Values.redis.port.ro }}"
{{- else if eq .Values.redis.type "cluster" }}
            - name: STRATUS_CATALOG_REDIS_CLUSTER_HOSTS
              value: redis-0.redis.{{.Release.Namespace}}.svc.cluster.local:6379,redis-1.redis.{{.Release.Namespace}}.svc.cluster.local:6379,redis-2.redis.{{.Release.Namespace}}.svc.cluster.local:6379,redis-3.redis.{{.Release.Namespace}}.svc.cluster.local:6379,redis-4.redis.{{.Release.Namespace}}.svc.cluster.local:6379,redis-5.redis.{{.Release.Namespace}}.svc.cluster.local:6379           
{{- else if eq .Values.redis.type "sentinel" }}
            - name: STRATUS_CATALOG_REDIS_SENTINEL_HOSTS
              value: redis-sentinel.{{.Release.Namespace}}.svc.cluster.local:26379
            - name: STRATUS_CATALOG_REDIS_SENTINEL_MASTER
              value: mymaster
{{- else }}
            - name: STRATUS_CATALOG_REDIS_MANUAL_HOST
              value: redis.{{.Release.Namespace}}.svc.cluster.local
            - name: STRATUS_CATALOG_REDIS_MANUAL_PORT
              value: "6379"
{{- end }}
{{- if .Values.redis.password }}
            - name: STRATUS_CATALOG_REDIS_MANUAL_PASSWORD
              value: "{{ .Values.redis.password }}"
{{- end }}
          image: {{ .Values.stratus.container.repo }}/{{ .Values.stratus.container.image }}:{{ .Values.stratus.container.tag }}
          imagePullPolicy: {{ default "Always" .Values.stratus.ui.pullPolicy }}
{{- if .Values.xmem }}
          command: ["java",
                "-XX:+UnlockExperimentalVMOptions",
                "-XX:+UseCGroupMemoryLimitForHeap",
                "-XX:MaxRAMFraction=1",
                "-Xbootclasspath/a:/marlin-0.8.1.2-Unsafe.jar",
                "-Xbootclasspath/p:/marlin-0.7.5-Unsafe-sun-java2d.jar",
                "-Dsun.java2d.renderer=org.marlin.pisces.MarlinRenderingEngine",
                "-jar",
                "/stratus-application-1.0.6-exec.jar"
                ]
{{- end }}
          resources:
            requests:
              memory: {{ .Values.stratus.ogc.resources.mem }}
              cpu: {{ .Values.stratus.ogc.resources.cpu }}
            limits:
              memory: {{ .Values.stratus.ogc.resources.maxMem }}
              cpu: {{ .Values.stratus.ogc.resources.maxCpu }}
          ports:
            - containerPort: 8080
{{- if .Values.debug }}
            - port: 5005
{{- end }}
          securityContext:
            privileged: false
          readinessProbe:
            httpGet:
              path: {{ .Values.stratus.ogc.readinessPath }}
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 1
          volumeMounts:
{{- if .Values.stratus.persistentVolume.host }}
            - mountPath: {{ .Values.stratus.persistentVolume.localPath | default "/data" }}
              name: datavol
{{- end }}
      volumes:
{{- if .Values.stratus.persistentVolume.host }}
        - name: datavol
          persistentVolumeClaim:
            claimName: pvc-stratus-ogc
{{- end }}
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: stratus-ogc-hpa
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: stratus-ogc-deployment
  minReplicas: {{ .Values.stratus.ogc.resources.minReplicas | default "2" }}
  maxReplicas: {{ .Values.stratus.ogc.resources.maxReplicas | default "3" }}
  targetCPUUtilizationPercentage: {{ .Values.stratus.ogc.hpa.cpu | default "80" }}
